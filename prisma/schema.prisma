// Simple Authentication Schema
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  user_id          Int      @id @default(autoincrement())
  email            String   @unique
  password         String?
  firstName        String?  @map("first_name")
  lastName         String?  @map("last_name")
  dateOfBirth      DateTime? @map("date_of_birth")
  gender           String?
  location         String?
  isActive         Boolean  @default(true) @map("is_active")
  isEmailVerified  Boolean  @default(false) @map("is_email_verified")
  createdAt        DateTime @default(now()) @map("created_at")
  updatedAt        DateTime @updatedAt @map("updated_at")
  
  // Relations
  otps Otp[]
  jwtTokens JwtToken[]

  @@map("users")
}

model Otp {
  id        Int      @id @default(autoincrement())
  userId    Int      @map("user_id")
  code      String
  purpose   String   // login, registration, password_reset
  expiresAt DateTime @map("expires_at")
  isUsed    Boolean  @default(false) @map("is_used")
  createdAt DateTime @default(now()) @map("created_at")

  // Relations
  user User @relation(fields: [userId], references: [user_id], onDelete: Cascade)

  @@map("otp_verification")
}

model JwtToken {
  id         Int      @id @default(autoincrement())
  token      String   @unique // Access token
  refreshToken String @unique
  userId     Int      @map("user_id")
  expiresAt  DateTime @map("expires_at")
  createdAt  DateTime @default(now()) @map("created_at")

  // Relations
  user User @relation(fields: [userId], references: [user_id], onDelete: Cascade)

  @@map("jwt_tokens")
}

model TokenBlacklist {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  blacklistedAt DateTime @default(now()) @map("blacklisted_at")

  @@map("token_blacklist")
}